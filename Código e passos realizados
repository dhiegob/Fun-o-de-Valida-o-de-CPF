Passo 1: Configurar o Ambiente e Criar o Projeto
Instale o template do Azure Functions para .NET:
dotnet new -i Microsoft.Azure.Functions.ProjectTemplate  
Crie o projeto Azure Functions: 
dotnet new func --name ValidadorCpfFunction --worker-runtime dotnet 
cd ValidadorCpfFunction

Passo 2: Implementar a Função de Validação de CPF

Substitua o conteúdo do arquivo gerado (Function1.cs) pelo código abaixo, que implementa a validação de CPF:
using System;
using System.IO;
using System.Text.RegularExpressions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

public static class Function1
{
    [FunctionName("ValidadorCpf")]
    public static IActionResult Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        log.LogInformation("C# HTTP trigger function processed a request.");

        string requestBody = new StreamReader(req.Body).ReadToEnd();
        dynamic data = JsonConvert.DeserializeObject(requestBody);
        string cpf = data?.cpf;

        if (string.IsNullOrEmpty(cpf) || cpf.Length != 11 || !Regex.IsMatch(cpf, @"^\d{11}$"))
        {
            return new BadRequestObjectResult("CPF inválido");
        }

        int[] multiplicador1 = new int[9] { 10, 9, 8, 7, 6, 5, 4, 3, 2 };
        int[] multiplicador2 = new int[10] { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 };
        string tempCpf, digito;
        int soma, resto;

        tempCpf = cpf.Substring(0, 9);
        soma = 0;

        for (int i = 0; i < 9; i++)
            soma += int.Parse(tempCpf[i].ToString()) * multiplicador1[i];

        resto = soma % 11;
        if (resto < 2)
            resto = 0;
        else
            resto = 11 - resto;

        digito = resto.ToString();
        tempCpf = tempCpf + digito;
        soma = 0;

        for (int i = 0; i < 10; i++)
            soma += int.Parse(tempCpf[i].ToString()) * multiplicador2[i];

        resto = soma % 11;
        if (resto < 2)
            resto = 0;
        else
            resto = 11 - resto;

        digito = digito + resto.ToString();
        bool isValid = cpf.EndsWith(digito);

        return new OkObjectResult(isValid ? "CPF Válido" : "CPF Inválido");
    }
}


Passo 3: 
Testar a Função Localmente Execute a aplicação localmente:
func start

Use uma ferramenta como Postman, cURL ou o navegador para testar: 
Endpoint local: http://localhost:7071/api/ValidadorCpf 
Método: POST 
Body (JSON): json Copiar Editar

{
  "cpf": "12345678909"
}

Passo 4: Publicar a Função no Azure Publique diretamente no Azure: 

Certifique-se de já ter criado um App Service no Azure antes de executar este comando: 

func azure functionapp publish ValidadorCpf
